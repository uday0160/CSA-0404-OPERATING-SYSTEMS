#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <string.h>

#define SHM_SIZE 1024  // shared memory size

int main() {
    key_t key;
    int shmid;
    char *shared_memory;

    // Generate a unique key
    key = ftok("shmfile", 65);  // "shmfile" can be any existing file

    // Create shared memory segment
    shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        shared_memory = (char*) shmat(shmid, NULL, 0);
        if (shared_memory == (char *)(-1)) {
            perror("shmat failed (child)");
            exit(1);
        }

        // Read from shared memory
        printf("Child reads from shared memory: %s\n", shared_memory);

        // Detach
        shmdt(shared_memory);
    } else {
        // Parent process
        shared_memory = (char*) shmat(shmid, NULL, 0);
        if (shared_memory == (char *)(-1)) {
            perror("shmat failed (parent)");
            exit(1);
        }

        // Write to shared memory
        const char *message = "Hello from parent!";
        strncpy(shared_memory, message, SHM_SIZE);

        // Wait for child to read
        sleep(2);

        // Detach and remove shared memory
        shmdt(shared_memory);
        shmctl(shmid, IPC_RMID, NULL);
    }

    return 0;
}
output
Child reads from shared memory: Hello from parent!
